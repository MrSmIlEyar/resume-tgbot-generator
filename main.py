import logging

import docx
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from docx import Document
import os
import emoji

import dbConfig
import signup
import markup

# –ó–∞–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="6137850721:AAFSamidQjOex0cjEF5G1SYqtj1knbeZHz8")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    signup.signup(message.from_user["username"])
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –Ω–∞–ø–∏—à—É —Ç–≤–æ—ë —Ä–µ–∑—é–º–µ, —Ç–æ–ª—å–∫–æ –ª–∏—à—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ)", reply_markup=markup.MainMenu)

@dp.message_handler(commands=["get_resume"])
async def resume(message: types.Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—é–º–µ")

@dp.message_handler()
async def main_dialog(message: types.Message):
    if message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
        username = message.from_user["username"]
        supported_user = username.replace('.', '-')
        request = requests.get(dbConfig.dbConfig["databaseURL"] + "/.json" + '?auth=' + dbConfig.Secret)
        data = request.json()
        phone_number = data[supported_user]["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"]
        await message.answer(emoji.emojize('üë§') + '–ü—Ä–æ—Ñ–∏–ª—å:' + '\n\n' +
                             '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + username + '\n' +
                             '–¢–µ–ª–µ—Ñ–æ–Ω: ' + phone_number, reply_markup=markup.Profile)

    elif message.text == "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ":
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç –æ–ø—Ä–æ—Å")

    elif message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ":
        user_id = message.from_user.id

        user = message.from_user
        user_info = get_user_info(user)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        filename = f"{user_id}.docx"
        directory = "C:\\Users\\arosl\\PycharmProjects\\resume-tgbot-generator"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –ø—É—Ç—å
        filepath = os.path.join(directory, filename)
        generate_docx_with_array_elements(user_info, filepath)

        # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id = message.chat.id
        user_id = message.from_user.id
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É docx
        try:
            docx_path = f'C:\\Users\\arosl\\PycharmProjects\\resume-tgbot-generator\\{user_id}.docx'
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª docx –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
            with open(docx_path, 'rb') as docx:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_document(chat_id, docx)
        except:
            await message.answer(f"–í–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ":
        await message.answer("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ", reply_markup=markup.EditInfo)

    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ":
        await message.answer("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", reply_markup=markup.EditPhoto)

    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç":
        await message.answer("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤ —Ä–µ–∑—é–º–µ", reply_markup=markup.EditText)

    elif message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup.MainMenu)

    else:
        await message.answer("–ú–Ω–µ –Ω—É–∂–Ω—ã –∫–æ–º–∞–Ω–¥—ã...")


def generate_docx_with_array_elements(array, direct):
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document = Document()

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document.add_heading('Information about User', level=0)

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    for item in array:
        paragraph = document.add_paragraph(str(item))
        paragraph.style = document.styles['List Bullet']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–∞–π–ª
    document.save(direct)


def get_user_info(user: types.User):
    user_info = [
        f"User ID: {user.id}",
        f"Username: {user.username}",
        f"First name: {user.first_name}",
        f"Last name: {user.last_name}",
        f"Language: {user.language_code}",
        f"Is bot: {user.is_bot}"
    ]
    return user_info


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

def creatingadocx(x):
    doc = docx.Document()
    doc.add_heading('–†–µ–∑—é–º–µ', 0)
    par1 = doc.add_paragraph(x)
    return doc.save('resume.docx')
# f = creatingadocx(x)



